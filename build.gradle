plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id "org.sonarqube" version '6.0.1.5171'
	id 'com.diffplug.spotless' version '7.0.2'
}

jacoco {
	toolVersion = "0.8.13" // Use the version you want
}

tasks.test {
	finalizedBy(tasks.jacocoTestReport)
}
tasks.jacocoTestReport {
	dependsOn(tasks.test)   // tests are required to run before generating the report
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**', // Exclude all config classes
				'**/constants/**', // Exclude all constants classes
				'**/*Constants*',  // Exclude classes containing Constants in their name
				'**/com/aci/smart_onboarding/util/brd_form/**', // Exclude brd_form utilities
				'**/dto/**', // Exclude all DTOs
				'**/model/**', // Exclude all models
				'**/swagger/**', // Exclude all swagger classes
				'**/UATAIService*',  // Exclude UATAIService
				'**/util/**'
			])
		}))
	}
}

group = 'com.aci'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/eligeti-ravi-teja-peerislands/AI-Service")
		credentials {
			username = System.getenv("GITHUB_USERNAME")
			password = System.getenv("GITHUB_TOKEN")
		}
	}
	mavenLocal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'com.aci:ai:0.0.1-SNAPSHOT'
	implementation 'org.modelmapper:modelmapper:3.2.2'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.18.3'

	implementation 'ch.qos.logback:logback-classic'
	implementation 'org.slf4j:slf4j-api'

	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.3.0'
	implementation 'org.webjars:webjars-locator-core:0.55'

	implementation 'org.apache.tika:tika-core:3.1.0'

	// Spring Retry
	implementation 'org.springframework.retry:spring-retry:2.0.5'
	implementation 'org.springframework:spring-aspects:6.1.5'

	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.18.1'
	testImplementation 'com.icegreen:greenmail:2.0.0'

	implementation "com.azure:azure-storage-blob:12.30.0"

	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:mongodb'

	testImplementation 'io.projectreactor:reactor-test'

	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.mockito:mockito-inline:5.2.0'

	// Azure AD MSAL4J
	implementation 'com.microsoft.azure:msal4j:1.13.3'
	implementation 'com.microsoft.azure:msal4j-persistence-extension:1.2.0'

	// JWT Libraries
	implementation 'com.nimbusds:nimbus-jose-jwt:9.31'

	// Spring Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.sendgrid:sendgrid-java:4.10.1'


	// Azure AD Dependencies
	implementation 'com.azure.spring:spring-cloud-azure-starter-active-directory:4.11.0'
	implementation 'com.azure:azure-identity:1.10.0'

	// CSV and Excel Processing
	implementation 'com.opencsv:opencsv:5.9'
	implementation 'org.apache.poi:poi:5.2.5'
	implementation 'org.apache.poi:poi-ooxml:5.2.5'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core:5.10.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.3.0'

	// Redis dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	testImplementation 'it.ozimov:embedded-redis:0.7.3'

	// Spring WebFlux test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

sonar {
	properties {
		property "sonar.projectKey", "smartonboarding"
		property "sonar.projectName", "smart-onboarding"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", System.getenv('SONAR_TOKEN')
	}
}

// Define common exclusions for Jacoco tasks
def jacocoExcludes = [
		'**/config/**',
		'**/constants/**',
		'**/*Constants*',
		'**/com/aci/smart_onboarding/util/brd_form/**',
		'**/dto/**',
		'**/model/**',
		'**/swagger/**',
		'**/UATAIService*'  // Exclude UATAIService
]

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required = true
		html.required = true
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		// Apply the same exclusions as in jacocoTestReport
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		}))
	}
	
	violationRules {
		rule {
			element = 'BUNDLE'
			limit {
				counter = 'INSTRUCTION'  // Change to INSTRUCTION which is what the HTML report uses
				value = 'COVEREDRATIO'
				minimum = 0.85
			}
		}
		
		rule {
			enabled = false  // Disable the second rule temporarily
			element = 'CLASS'
			excludes = jacocoExcludes
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

spotless {
	java {
		target 'src/**/*.java'
		googleJavaFormat('1.25.2')
	}
}

task formatCode {
	group = 'Formatting'
	description = 'Formats the code using the provided XML style rules'
	dependsOn 'spotlessApply'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}

springBoot {
	buildInfo()
}
